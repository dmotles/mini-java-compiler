import java.util.*;
import ir.*;
import visitor.symbol.*;
import syntaxtree.*;
import mips.allocator.*;
public class TestRegisterAllocation {
    private static final ArrayList<Register> gpRegList;
    static {
        gpRegList = new ArrayList<Register>(16);
        gpRegList.add(Register.t0);
        gpRegList.add(Register.t1);
        gpRegList.add(Register.t2);
        gpRegList.add(Register.t3);
        gpRegList.add(Register.t4);
        gpRegList.add(Register.t5);
        gpRegList.add(Register.t6);
        gpRegList.add(Register.t7);
        gpRegList.add(Register.t8);
        gpRegList.add(Register.t9);
        gpRegList.add(Register.s0);
        gpRegList.add(Register.s1);
        gpRegList.add(Register.s2);
        gpRegList.add(Register.s3);
        gpRegList.add(Register.s4);
        gpRegList.add(Register.s5);
        gpRegList.add(Register.s6);
        gpRegList.add(Register.s7);
    }
    public static void main( String [] args ) {
        IntegerType INT = new IntegerType();
        Identifier a = new Identifier("a");
        Identifier b = new Identifier("b");
        Identifier c = new Identifier("c");
        Identifier d = new Identifier("d");
        Identifier e = new Identifier("e");
        Identifier f = new Identifier("f");
        Identifier g = new Identifier("g");
        Identifier h = new Identifier("h");
        Identifier i = new Identifier("i");
        Identifier j = new Identifier("j");
        Identifier k = new Identifier("k");
        Identifier l = new Identifier("l");
        Identifier m = new Identifier("m");
        Identifier n = new Identifier("n");
        Identifier o = new Identifier("o");
        Identifier p = new Identifier("p");
        Identifier q = new Identifier("q");
        Identifier r = new Identifier("r");
        Identifier s = new Identifier("s");
        Identifier t = new Identifier("t");
        Identifier u = new Identifier("u");
        Identifier v = new Identifier("v");
        Identifier w = new Identifier("w");
        Identifier x = new Identifier("x");
        Identifier y = new Identifier("y");
        Identifier z = new Identifier("z");
        VariableSymbol aSym = new VariableSymbol(INT,a);
        VariableSymbol bSym = new VariableSymbol(INT,b);
        VariableSymbol cSym = new VariableSymbol(INT,c);
        VariableSymbol dSym = new VariableSymbol(INT,d);
        VariableSymbol eSym = new VariableSymbol(INT,e);
        VariableSymbol fSym = new VariableSymbol(INT,f);
        VariableSymbol gSym = new VariableSymbol(INT,g);
        VariableSymbol hSym = new VariableSymbol(INT,h);
        VariableSymbol iSym = new VariableSymbol(INT,i);
        VariableSymbol jSym = new VariableSymbol(INT,j);
        VariableSymbol kSym = new VariableSymbol(INT,k);
        VariableSymbol lSym = new VariableSymbol(INT,l);
        VariableSymbol mSym = new VariableSymbol(INT,m);
        VariableSymbol nSym = new VariableSymbol(INT,n);
        VariableSymbol oSym = new VariableSymbol(INT,o);
        VariableSymbol pSym = new VariableSymbol(INT,p);
        VariableSymbol qSym = new VariableSymbol(INT,q);
        VariableSymbol rSym = new VariableSymbol(INT,r);
        VariableSymbol sSym = new VariableSymbol(INT,s);
        VariableSymbol tSym = new VariableSymbol(INT,t);
        VariableSymbol uSym = new VariableSymbol(INT,u);
        VariableSymbol vSym = new VariableSymbol(INT,v);
        VariableSymbol wSym = new VariableSymbol(INT,w);
        VariableSymbol xSym = new VariableSymbol(INT,x);
        VariableSymbol ySym = new VariableSymbol(INT,y);
        VariableSymbol zSym = new VariableSymbol(INT,z);

        ArrayList<Quadruple> ir = new ArrayList<Quadruple>();
        ir.add( new CopyQuadruple( aSym, bSym ) );
        ir.add( new CopyQuadruple( aSym, cSym ) );
        ir.add( new CopyQuadruple( aSym, dSym ) );
        ir.add( new CopyQuadruple( aSym, eSym ) );
        ir.add( new CopyQuadruple( aSym, fSym ) );
        ir.add( new CopyQuadruple( aSym, gSym ) );
        ir.add( new CopyQuadruple( aSym, hSym ) );
        ir.add( new CopyQuadruple( aSym, iSym ) );
        ir.add( new CopyQuadruple( aSym, jSym ) );
        ir.add( new CopyQuadruple( aSym, kSym ) );
        ir.add( new CopyQuadruple( aSym, lSym ) );
        ir.add( new CopyQuadruple( aSym, mSym ) );
        ir.add( new CopyQuadruple( aSym, nSym ) );
        ir.add( new CopyQuadruple( aSym, oSym ) );
        ir.add( new CopyQuadruple( aSym, pSym ) );
        ir.add( new CopyQuadruple( aSym, qSym ) );
        ir.add( new CopyQuadruple( aSym, rSym ) );
        ir.add( new CopyQuadruple( aSym, sSym ) );
        ir.add( new CopyQuadruple( aSym, tSym ) );
        ir.add( new CopyQuadruple( aSym, uSym ) );
        ir.add( new CopyQuadruple( aSym, vSym ) );
        ir.add( new ReturnQuadruple( zSym ) );
        LivenessData ld = new LivenessData( ir );
        ld.out = new ArrayList<HashSet<Symbol>>(2);
        HashSet<Symbol> set1 = new HashSet<Symbol>();
        HashSet<Symbol> set2 = new HashSet<Symbol>();
        ld.out.add(set1);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        ld.out.add(set2);
        set1.add( aSym );
        set1.add( bSym );
        set1.add( cSym );
        set1.add( dSym );
        set1.add( eSym );
        set1.add( fSym );
        set1.add( gSym );
        set1.add( hSym );
        set1.add( iSym );
        set1.add( jSym );
        set1.add( kSym );
        set1.add( lSym );
        set1.add( mSym );
        set1.add( nSym );
        set1.add( oSym );
        set1.add( pSym );
        set1.add( qSym );
        set1.add( rSym );
        set1.add( sSym );
        set1.add( tSym );
        set1.add( uSym );
        set1.add( vSym );
        set1.add( wSym );
        set1.add( xSym );
        set1.add( ySym );
        set1.add( zSym );
        set2.add( aSym );
        set2.add( bSym );
        set2.add( cSym );
        set2.add( dSym );
        set2.add( eSym );
        set2.add( fSym );
        set2.add( gSym );
        set2.add( hSym );
        set2.add( iSym );
        set2.add( jSym );
        set2.add( kSym );
        set2.add( lSym );
        set2.add( mSym );
        set2.add( nSym );
        set2.add( oSym );
        set2.add( pSym );
        set2.add( qSym );
        set2.add( rSym );
        set2.add( sSym );
        set2.add( tSym );
        set2.add( uSym );
        set2.add( vSym );
        set2.add( wSym );
        set2.add( xSym );
        set2.add( ySym );
        set2.add( zSym );

        MethodSymbol meth = new MethodSymbol( INT, new Identifier("main" ) );
        ClassSymbol clas = new ClassSymbol( new Identifier("Class") );

        InterferenceGraph ifg = new InterferenceGraph( meth, ld, ir );
        ifg.color( gpRegList );
    }

}
